# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be: 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

from utility import *

#brute force algorithm, refined below
def task_12():
    divisorThreshold = 500
    n = 2
    triangleNumber = 1
    while True:
        triangleNumber += n

        numDivisors = 0
        otherDivisors = []
        for i in range (1, int(math.floor(math.sqrt(triangleNumber))) + 1):
            if triangleNumber % i == 0:
                if i not in otherDivisors:
                    numDivisors += 2
                    otherDivisors.append(triangleNumber / i)
                if (i ** 2) == triangleNumber:
                    numDivisors -= 1

            if numDivisors >= divisorThreshold:
                return triangleNumber
        n += 1

if __name__ == '__main__':
    print(task_12())
    # answer is 76576500
